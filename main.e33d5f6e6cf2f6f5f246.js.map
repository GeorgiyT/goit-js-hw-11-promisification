{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","res","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","rej","id","logSuccess","logError","warn","amount","catch"],"mappings":"yLAKQA,EAAQ,SAAAC,GAMZ,OALgB,IAAIC,SAAQ,SAAAC,GAC1BC,YAAW,WACTD,EAAIF,KACHA,OAKDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAEvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAMjB,IAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAOjC,OANgB,IAAIb,SAAQ,SAAAC,GAI1BA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAO7DZ,EAAS,SAAAa,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ,GAKrC,IAIMe,EAAkB,SAAAC,GACtB,IALiCC,EAAKC,EAKhCvB,GAL2BsB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAepD,OAVgB,IAAIpB,SAAQ,SAACC,EAAKwB,GAChCvB,YAAW,WACUoB,KAAKE,SAAW,GAEjCvB,EAAI,CAACkB,EAAYO,GAAI5B,IAErB2B,EAAIN,EAAYO,MAEjB5B,OAKD6B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVtB,EAAU,KACjCC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAGFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAAMvB,KAAKoB,GAAYI,MAAMH,GAC/DV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,K","file":"main.e33d5f6e6cf2f6f5f246.js","sourcesContent":["import './styles.css';\n\n// -----------------------------------------1--------------------------------------------------\n\n{\n  const delay = ms => {\n    const promise = new Promise(res => {\n      setTimeout(() => {\n        res(ms);\n      }, ms);\n    });\n    return promise;\n  };\n\n  const logger = time => console.log(`Resolved after ${time}ms`);\n\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms\n}\n\n// -----------------------------------------2--------------------------------------------------\n\n{\n  const users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: true },\n    { name: 'Lux', active: false },\n  ];\n\n  const toggleUserState = (allUsers, userName) => {\n    const promise = new Promise(res => {\n      const updatedUsers = allUsers.map(user =>\n        user.name === userName ? { ...user, active: !user.active } : user,\n      );\n      res(updatedUsers);\n    });\n    return promise;\n  };\n\n  const logger = updatedUsers => console.table(updatedUsers);\n\n  toggleUserState(users, 'Mango').then(logger);\n  toggleUserState(users, 'Lux').then(logger);\n}\n\n// -----------------------------------------3--------------------------------------------------\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n  const promise = new Promise((res, rej) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      if (canProcess) {\n        res([transaction.id, delay]);\n      } else {\n        rej(transaction.id);\n      }\n    }, delay);\n  });\n  return promise;\n};\n\nconst logSuccess = ([id, time]) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"sourceRoot":""}